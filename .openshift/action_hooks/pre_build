#!/bin/bash
# This is a simple script and will be executed on your CI system if 
# available.  Otherwise it will execute while your application is stopped
# before the build step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

cd ${OPENSHIFT_REPO_DIR}
NODE_VERSION='v0.10.1'
NODE_REMOVE_OLD='false'
REDIS_VERSION='2.6.7'
REDIS_PORT='16379'
REDIS_LOGLEVEL='notice'
REDIS_REMOVE_OLD='false'
REDIS_IP=${OPENSHIFT_INTERNAL_IP}
CARTRIDGE_NAME='diy-0.1'

# 20130105: Openshift removed OPENSHIFT_RUN_DIR, so need to manually create it
if [ -z $OPENSHIFT_RUN_DIR ]; then
  export OPENSHIFT_RUN_DIR=${OPENSHIFT_HOMEDIR}${CARTRIDGE_NAME}/run/
fi

# Prepare Node.js
if [ ! -e ${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}/bin/node ]; then
  # Delete previous version
  if [ $NODE_REMOVE_OLD == "true" ]; then
    echo "rm -rf ${OPENSHIFT_DATA_DIR}node-*"
    rm -rf ${OPENSHIFT_DATA_DIR}node-*
  fi
  cd ${OPENSHIFT_TMP_DIR}
  # Determine hardware type for pre-compiled linux binary
  if [ "`uname -i`" == "x86_64" ]; then
    TYPE="x64"
  else
    TYPE="x86"
  fi
  BINARY="http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-$TYPE.tar.gz"
  # Check pre-compiled linux binary
  if [ "`curl -Is $BINARY | grep '200 OK'`" != '' ]; then
    curl -L -o node-${NODE_VERSION}-linux-${TYPE}.tar.gz $BINARY
    tar -xvzf node-${NODE_VERSION}-linux-${TYPE}.tar.gz
    mv node-${NODE_VERSION}-linux-${TYPE} ${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}
    rm -f node-${NODE_VERSION}-linux-${TYPE}.tar.gz
  else
    # Don't have pre-compiled binary, compile from source. Determine tarball url
    tarball=''
    if [ "`curl -Is "http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION.tar.gz" | grep '200 OK'`" != '' ]; then
      tarball="http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION.tar.gz"
    elif [ "`curl -Is "http://nodejs.org/dist/node-$NODE_VERSION.tar.gz" | grep '200 OK'`" != '' ]; then
      tarball="http://nodejs.org/dist/node-$NODE_VERSION.tar.gz"
    fi
    # Check is tarball already download and extracted
    if [ ! -d node-${NODE_VERSION} ]; then
      curl -L -o node-${NODE_VERSION}.tar.gz $tarball
      tar -xvzf node-${NODE_VERSION}.tar.gz
    fi
    cd node-${NODE_VERSION}
    echo "Start compiling Node ${NODE_VERSION} on Openshift (it'll take a while)"
    ./configure --prefix="${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}" && make && make install
    # Assume it works, delete the tarball and source codes
    # because files in /tmp still counted into the disk quota
    cd ${OPENSHIFT_TMP_DIR}
    rm -f node-${NODE_VERSION}.tar.gz
    rm -rf node-${NODE_VERSION}/
  fi
fi

# Prepare Redis
if [ ! -e ${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION}/bin/redis-server ]; then
  # Delete previous version
  if [ $REDIS_REMOVE_OLD == "true" ]; then
    echo "rm -rf ${OPENSHIFT_DATA_DIR}redis-*"
    rm -rf ${OPENSHIFT_DATA_DIR}redis-*
  fi
  cd ${OPENSHIFT_TMP_DIR}
  tarball=''
  if [ "`curl -Is "http://redis.googlecode.com/files/redis-${REDIS_VERSION}.tar.gz" | grep '200 OK'`" != '' ]; then
    tarball="http://redis.googlecode.com/files/redis-${REDIS_VERSION}.tar.gz"
  else
    tarball="http://download.redis.io/redis-stable.tar.gz"
    REDIS_VERSION="stable"
    echo "#### ${REDIS_VERSION} not exist. Change redis.verion to *stable*"
  fi

  if [ ! -d redis-${REDIS_VERSION} ]; then
    curl -L -o redis-${REDIS_VERSION}.tar.gz $tarball
    tar -xvzf redis-${REDIS_VERSION}.tar.gz
  fi
  cd redis-${REDIS_VERSION}

  echo "Start compiling Redis ${REDIS_VERSION} on Openshift (it'll take a while)"
  PREFIX=${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION} make -e install
  cp -f redis.conf ${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION}/redis.conf.orig

  mkdir -p ${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION}/data
  # Clean up
  cd ${OPENSHIFT_TMP_DIR}
  rm -f redis-${REDIS_VERSION}.tar.gz
  rm -rf redis-${REDIS_VERSION}/
fi

# Create redis.conf
cat ${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION}/redis.conf.orig | sed -e "s#daemonize no#daemonize yes#" -e "s#pidfile /var/run/redis.pid#pidfile ${OPENSHIFT_RUN_DIR}redis.pid#"  -e "s#port 6379#port ${REDIS_PORT}#" -e "s#dir ./#dir ${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION}/data#" -e "s#logfile stdout#logfile ${OPENSHIFT_DIY_LOG_DIR}redis.log#" -e "s#loglevel verbose#loglevel ${REDIS_LOGLEVEL}#"> ${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION}/redis.conf
# 20130105: Openshift seems blocked binding to localhost or 127.0.0.1
echo "bind ${REDIS_IP}" >> ${OPENSHIFT_DATA_DIR}redis-${REDIS_VERSION}/redis.conf

# Create environment variables for this version
cat <<EOF > ${OPENSHIFT_DATA_DIR}diy_env.sh
export NODE_VERSION=${NODE_VERSION}
export REDIS_VERSION=${REDIS_VERSION}
export REDIS_IP=${REDIS_IP}
export REDIS_PORT=${REDIS_PORT}
export TMPDIR=\${OPENSHIFT_TMP_DIR}
if [ -z \$NODE_DEFINED ]; then
  export NODE_DEFINED=1
  export PATH="\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/bin:\${OPENSHIFT_DATA_DIR}redis-\${REDIS_VERSION}/bin:\$PATH"
  export npm_config_cache=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npm
  export npm_config_userconfig=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npmrc
  export npm_config_userignorefile=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npmignore
  export npm_config_tmp=\${OPENSHIFT_TMP_DIR}
  export NODE_ENV=production
fi
if [ -z \$OPENSHIFT_RUN_DIR ]; then
  export OPENSHIFT_RUN_DIR=\${OPENSHIFT_HOMEDIR}${CARTRIDGE_NAME}/run/
fi
EOF
chmod +x ${OPENSHIFT_DATA_DIR}diy_env.sh
